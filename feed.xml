<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The path of coding enlightment</title>
  <id>http://shiroyasha.io/</id>
  <link href="http://shiroyasha.io/"/>
  <link href="http://shiroyasha.io/feed.xml" rel="self"/>
  <updated>2025-09-02T00:00:00+00:00</updated>
  <author>
    <name>Igor ≈†arƒçeviƒá</name>
  </author>
  <entry>
    <title>Parallel AI Agents Are a Game Changer</title>
    <link rel="alternate" href="http://shiroyasha.io/parallel-ai-agents-are-a-game-changer.html"/>
    <id>http://shiroyasha.io/parallel-ai-agents-are-a-game-changer.html</id>
    <published>2025-09-02T00:00:00+00:00</published>
    <updated>2025-09-02T22:36:49+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;I‚Äôve been in this industry long enough to watch technologies come and go. I‚Äôve
seen the excitement around new frameworks, the promises of revolutionary tools,
and the breathless predictions about what would ‚Äúchange everything.‚Äù Most of the
time, these...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been in this industry long enough to watch technologies come and go. I&amp;rsquo;ve
seen the excitement around new frameworks, the promises of revolutionary tools,
and the breathless predictions about what would &amp;ldquo;change everything.&amp;rdquo; Most of the
time, these technologies turned out to be incremental improvements wrapped in
marketing hyperbole.&lt;/p&gt;

&lt;p&gt;But parallel agents? This is different. This is the first time I can say,
without any exaggeration, that I&amp;rsquo;m witnessing technology that will fundamentally
transform how we develop software.&lt;/p&gt;

&lt;h2&gt;How We Got Here&lt;/h2&gt;

&lt;p&gt;To understand where we are today, we need to look at the full history of AI-assisted
coding. It started with GitHub Copilot, which introduced the concept of AI pair
programming. Copilot could autocomplete code as you typed, suggesting functions,
completing implementations, and helping with repetitive tasks.&lt;/p&gt;

&lt;p&gt;Then came the AI-powered editors like Windsurf and Cursor. These took the concept
further by integrating AI deeply into the development environment. Instead of just
autocomplete, you could have conversations with AI about your code, ask for
refactoring suggestions, and get help with debugging. The AI understood your
entire codebase and could provide contextual assistance.&lt;/p&gt;

&lt;p&gt;This year, we&amp;rsquo;ve been working with what&amp;rsquo;s called &amp;ldquo;vibe coding&amp;rdquo; ‚Äî AI tools where you
describe what you want in natural language, and the AI generates complete functions,
classes, or implementations from scratch. You tell it &amp;ldquo;create a sign up form with
google, github, and microsoft login options&amp;rdquo; and it produces working code that
captures the vibe of what you asked for.&lt;/p&gt;

&lt;p&gt;The term &amp;ldquo;vibe coding&amp;rdquo; was coined by Andrej Karpathy in
&lt;a href="https://x.com/karpathy/status/1886192184808149383"&gt;this tweet&lt;/a&gt;, which perfectly
captured what this new way of programming felt like.&lt;/p&gt;

&lt;blockquote&gt;&lt;p lang="en" dir="ltr"&gt;There&amp;rsquo;s a new kind of coding I call &amp;ldquo;vibe coding&amp;rdquo;, where you fully give in to the vibes, embrace exponentials, and forget that the code even exists. It&amp;rsquo;s possible because the LLMs (e.g. Cursor Composer w Sonnet) are getting too good. Also I just talk to Composer with SuperWhisper‚Ä¶&lt;/p&gt;&amp;mdash; Andrej Karpathy (@karpathy) &lt;a href="https://twitter.com/karpathy/status/1886192184808149383?ref_src=twsrc%5Etfw"&gt;February 2, 2025&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;This was genuinely revolutionary. Suddenly, you could generate boilerplate code,
build simple functions, create UI components, and even tackle complex implementations
just by describing them. Many engineers adopted these tools and found them
incredibly useful for certain types of work.&lt;/p&gt;

&lt;p&gt;The technology worked well enough that it changed how many of us approached
coding. Instead of starting from a blank file, you could start with a working
implementation and refine from there. It made prototyping faster, reduced the
tedium of writing repetitive code, and opened up possibilities for rapid
development.&lt;/p&gt;

&lt;h2&gt;Running Agents in Parallel&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s different now: you can run multiple AI agents at the same time,
each working on different problems. Instead of waiting for one agent to finish
a task before starting the next one, you can have several agents running
simultaneously - one building a user interface, another writing API endpoints,
and a third creating database schemas.&lt;/p&gt;

&lt;p&gt;The core advantage is simple: you can do multiple things at once. This isn&amp;rsquo;t
about smarter AI or better algorithms - it&amp;rsquo;s about parallelization. The same
vibe coding tools we had before, just running multiple instances simultaneously.&lt;/p&gt;

&lt;p&gt;The first company that offered a good solution for this was GitHub, with their
GitHub Co-Pilots that were running in the cloud. You basically go to an issue
and describe it on GitHub. When you are ready with all the descriptions that
you think should be able to describe the function, you assign it to Co-Pilot
and then wait for the result.&lt;/p&gt;

&lt;p&gt;In practice, this means that you can go to your existing issues, check if
they have enough context to be handed over to AI. And then you wait
for the system to send you a notification that you can review the results.&lt;/p&gt;

&lt;p&gt;This transforms the way you write code, and instead of focusing on the microsteps,
you are playing the role of a senior engineer who is guiding and providing context
to multiple agents who are implementing the features in your codebase. Your job as an
engineer now becomes reviewing the code for correctness, ensuring that proper
architectural decisions were taken, that a feature makes sense from the user&amp;rsquo;s
perspective, and that the code meets all the security and compliance standards
that you need.&lt;/p&gt;

&lt;p&gt;The agent itself has the same limitations as you would when you&amp;rsquo;re vibe coding,
which means that they will have the same tendency to make bugs, to lack enough
context, to not understand the code. But you are as an engineer, and I would say
partly a product owner and designer, would guide the system to implement it
for you.&lt;/p&gt;

&lt;h2&gt;How to work with multiple parallel agents&lt;/h2&gt;

&lt;p&gt;Parallel agents are changing the way engineers work. Instead of focusing on one
task at a time, you can now coordinate several agents working on different
features or bug fixes in parallel. You‚Äôre actively managing multiple streams
of development, reviewing code, and providing feedback as each agent completes
its work.&lt;/p&gt;

&lt;p&gt;With this approach, I can manage to have 10‚Äì20 pull requests open at once, each
handled by a dedicated agent.&lt;/p&gt;

&lt;p&gt;Here are some practical steps to take:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Prepare issues with sufficient context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Start by ensuring each GitHub issue contains enough context for agents to
understand what needs to be built and how it integrates with the system. This
might include details about feature behavior, file locations, database
structure, or specific requirements such as displaying certain fields or
handling edge cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Assign agents in batches&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once issues are ready, assign them to AI agents (such as @copilot). Each
assignment typically starts a new pull request, where the agent creates a plan,
builds a checklist, and begins implementation. Multiple issues can be assigned
at once, allowing agents to work in parallel. Each individual agent takes
around 5-20 minutes to complete its work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Review and iterate locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After an agent completes its tasks, review the resulting pull requests locally.
Testing features and verifying correctness is essential. If changes are needed,
leave comments or feedback on the pull request, and the agent will continue
refining the solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Maintain flow between reviews&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike traditional workflows, parallel agent orchestration keeps me engaged
and focused. Instead of waiting for one agent to finish, it&amp;rsquo;s possible to move
between active pull requests‚Äîreviewing, testing, and providing feedback
as needed. This enables simultaneous progress on multiple tasks without
significant mental overhead.&lt;/p&gt;

&lt;p&gt;Here is a recording of how this works in practice:&lt;/p&gt;

&lt;div class="flex items-center justify-center"&gt;
&lt;blockquote class="twitter-tweet" data-media-max-width="720"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;rsquo;m having an amazing time with delegated copilot agents, driving 10 pull-requests in parallel. Great work &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;@github&lt;/a&gt; üëè &lt;a href="https://t.co/T6sCIBg6bH"&gt;pic.twitter.com/T6sCIBg6bH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Igor ≈†arƒçeviƒá (@igor_sarcevic) &lt;a href="https://twitter.com/igor_sarcevic/status/1958565202883957193?ref_src=twsrc%5Etfw"&gt;August 21, 2025&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2&gt;What to Expect from Parallel Agents&lt;/h2&gt;

&lt;p&gt;Working with parallel agents requires a different mindset than traditional or
vibe coding. The shift is as significant as moving from traditional coding to
AI-assisted development in the first place.&lt;/p&gt;

&lt;h3&gt;Mental Model Changes&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Control shifts from precision to orchestration.&lt;/strong&gt; Instead of controlling every
line of code, you&amp;rsquo;re managing multiple problems simultaneously. Think like a
system engineer managing Kubernetes pods rather than babysitting individual
servers - each task is expendable and replaceable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Everything becomes asynchronous.&lt;/strong&gt; Unlike vibe coding where you wait and
watch, parallel agents work asynchronously by default. The context you provide
upfront determines the result 30 minutes later. You can&amp;rsquo;t do half-hearted
prompts and fix as you go, because those fixes come an hour later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch thinking replaces linear thinking.&lt;/strong&gt; Instead of picking one perfect task
from the backlog, identify several problems you could tackle in a day. A good
approach is focusing on 2 critical deliverables while running 5-10 small
background tasks - copy changes, UI fixes, minor bugs that can process while
you focus on important work.&lt;/p&gt;

&lt;h3&gt;Realistic Success Rates&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t expect 100% success rates. Here&amp;rsquo;s what typically happens based on my personal
observation while writing code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;10%&lt;/strong&gt;: Perfect one-shot solution, ready to ship.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;20%&lt;/strong&gt;: Almost there, needs 10 minutes of local refinement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;40%&lt;/strong&gt;: Needs manual intervention.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;20%&lt;/strong&gt;: Completely wrong. Close the issue and write down learnings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10%&lt;/strong&gt;: Bad product idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if only 10% of the issues are solved perfectly by the agent, the process is
still valuable. Agents reliably handle the initial setup‚Äîfinding the right
files, writing boilerplate, and adding tests. By the time you review, much of
the groundwork is done, so you can focus on investigating and fixing specific
problems.&lt;/p&gt;

&lt;p&gt;The frustration of engineers comes when they don&amp;rsquo;t have a properly aligned
expectation of what they should expect from a coding agent. Some engineers
simply give up if they don&amp;rsquo;t get the perfect 100% solution. I think you should
move past this limitation and just learn to extract the goodness while jumping
in with proper engineering knowledge where it needs to be.&lt;/p&gt;

&lt;h3&gt;What Works Well vs. What Doesn&amp;rsquo;t&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Parallel agents excel at:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bug fixes and race conditions&lt;/li&gt;
&lt;li&gt;Backend logic, controllers, validations&lt;/li&gt;
&lt;li&gt;Database changes and migrations&lt;/li&gt;
&lt;li&gt;Package version bumps and code transformations&lt;/li&gt;
&lt;li&gt;Small, well-defined implementation tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;They struggle with:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New UI development (you need to see changes as you build)&lt;/li&gt;
&lt;li&gt;Tasks requiring real-time visual feedback&lt;/li&gt;
&lt;li&gt;Implementing undocumented additions to existing PRs&lt;/li&gt;
&lt;li&gt;Complex architectural decisions requiring context beyond the issue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Skills That Become More Important&lt;/h3&gt;

&lt;p&gt;Several traditional skills become even more valuable with parallel agents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full-stack understanding&lt;/strong&gt; is valuable when working with parallel agents. If
your expertise is limited to either frontend or backend, you&amp;rsquo;ll quickly
encounter roadblocks. Agents often need guidance across the entire stack, from
database migrations to UI updates, so being able to navigate both worlds
ensures smoother collaboration and better results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem decomposition&lt;/strong&gt; becomes a critical skill. Large, complex issues are
difficult for agents to tackle effectively. Breaking down big problems into
smaller, well-defined tasks allows agents to work independently and in
parallel, increasing the overall throughput and making it easier to review and
integrate their work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good writting skills&lt;/strong&gt; are important. Agents rely on the clarity and detail of your
issue descriptions to produce accurate results. Avoid vague language, unnecessary
jargon, or ambiguous requirements. The more specific and structured your
instructions, the higher the quality of the agent&amp;rsquo;s output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QA and Code Review skills&lt;/strong&gt; take center stage in this workflow. Since the
review cycle is the main bottleneck, being able to quickly assess code quality,
spot bugs, and verify that requirements are met is crucial. Efficient testing
and validation ensure that parallel development doesn&amp;rsquo;t lead to a backlog of
unreviewed or faulty code.&lt;/p&gt;

&lt;p&gt;When you are working with parallel agents, you should optimize for review speed.
You can start 50 issues, but you still need to review, understand, and verify
each one. Making that review cycle fast‚Äîideally under 10 seconds to check out,
rebuild, and test‚Äîbecomes critical to the entire workflow.&lt;/p&gt;

&lt;div class="flex items-center justify-center"&gt;
  &lt;blockquote class="twitter-tweet" data-media-max-width="560"&gt;&lt;p lang="en" dir="ltr"&gt;Learned a lot while using parallel &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;@github&lt;/a&gt; agents yesterday:&lt;br&gt;&lt;br&gt;1/ My mental model was not prepared for parallel async work with agents&lt;br&gt;2/ You can&amp;rsquo;t expect 100% success, but you can make a series of small bets&lt;br&gt;3/ Strategies to overcome blocking issues&lt;br&gt;4/ When to use Claude Code and‚Ä¶ &lt;a href="https://t.co/yKNNkNZnby"&gt;pic.twitter.com/yKNNkNZnby&lt;/a&gt;&lt;/p&gt;&amp;mdash; Igor ≈†arƒçeviƒá (@igor_sarcevic) &lt;a href="https://twitter.com/igor_sarcevic/status/1958895080166559749?ref_src=twsrc%5Etfw"&gt;August 22, 2025&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2&gt;Engineering Practices That Enable Parallel Agents&lt;/h2&gt;

&lt;p&gt;Working with parallel agents requires a well-structured engineering environment
that supports rapid iteration and review.&lt;/p&gt;

&lt;h3&gt;Fast CI/CD Pipeline&lt;/h3&gt;

&lt;p&gt;A robust CI/CD flow makes it easy to test and verify results. When agents
complete their work, you need to quickly validate that the changes work
correctly without manual deployment overhead. Automated testing, fast builds,
and seamless deployment processes remove friction from the review cycle. Without
this foundation, the bottleneck shifts from agent completion time to deployment
and testing time.&lt;/p&gt;

&lt;h3&gt;System Documentation&lt;/h3&gt;

&lt;p&gt;System architecture documentation helps when multiple agents work on different
parts of your codebase. Agents need to understand how components interact, where
files are located, what conventions are followed, and how different systems
integrate. Well-documented APIs, architectural decisions, coding standards, and
system boundaries help agents make better decisions and reduce the need for
manual corrections.&lt;/p&gt;

&lt;h3&gt;Preview and Staging Environments&lt;/h3&gt;

&lt;p&gt;A reliable staging environment where you can manually test features is required.
Since agents work asynchronously, you need a consistent place to validate their
output without affecting production systems. This environment should mirror
production, deploy quickly, and allow easy testing of multiple concurrent
changes. The ability to spin up isolated environments for different branches or
pull requests streamlines the parallel review process.&lt;/p&gt;

&lt;h3&gt;Monorepo Architecture Benefits&lt;/h3&gt;

&lt;p&gt;Keeping related services and components in a single monorepo works better when
working with parallel agents. A monorepo gives agents context about the entire
system within a single codebase.&lt;/p&gt;

&lt;p&gt;When agents work across multiple repositories, they lose context about service
interactions, shared libraries, and dependencies. This leads to solutions that
work in isolation but break integration points. With a monorepo, agents
understand the full scope of changes needed - updating API contracts, adjusting
client code, and modifying shared utilities all in one pull request.&lt;/p&gt;

&lt;p&gt;The unified view enables better architectural decisions. Agents can see existing
patterns, reuse common components, and maintain consistency across the system.
Code reviews are more effective because all related changes are visible in one
place, making it easier to verify that agents haven&amp;rsquo;t introduced integration
issues.&lt;/p&gt;

&lt;p&gt;Monorepos simplify deployment and testing for parallel development. Instead of
coordinating releases across multiple repositories, you can test complete system
changes together and deploy atomically. This reduces complexity when managing
multiple concurrent agent-generated changes across service boundaries.&lt;/p&gt;

&lt;h2&gt;Tools That Support Parallel Agents&lt;/h2&gt;

&lt;p&gt;Several development tools now support running parallel agents, each with
different strengths and maturity levels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Agents&lt;/strong&gt; offer the most polished experience. They&amp;rsquo;re integrated
directly into GitHub Issues and work seamlessly with VSCode. You assign issues
to @copilot, and agents create pull requests that you can review locally. There
are still some rough edges, but GitHub is addressing these issues one by one
with regular improvements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt; is currently experimenting with parallel agent support through a beta
program. They&amp;rsquo;ve invited select users to test this functionality, and early
reports suggest it&amp;rsquo;s a promising implementation. If you&amp;rsquo;re already using Cursor
for vibe coding, their parallel agents might be worth exploring once they open
up broader access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenAI&amp;rsquo;s Codex CLI&lt;/strong&gt; also supports running agents in the cloud, which enables
this type of parallel development workflow. The CLI lets you start agents that
continue running remotely, allowing you to manage multiple concurrent coding
tasks without keeping your local environment tied up.&lt;/p&gt;

&lt;p&gt;Each tool takes a slightly different approach to parallel execution, so the best
choice depends on your existing development workflow and tool preferences.&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been working with parallel agents for a few weeks now, and it&amp;rsquo;s changed
how I approach development. The ability to work on multiple problems
simultaneously, rather than sequentially, makes a real difference in
productivity.&lt;/p&gt;

&lt;p&gt;The technology isn&amp;rsquo;t perfect - you&amp;rsquo;ll spend time reviewing and fixing
agent-generated code. But when you can kick off 10 tasks and have most of them
move forward without your direct involvement, it frees up mental bandwidth for
the problems that actually need human judgment.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re curious about trying this approach, start with small, well-defined
issues in your backlog. Write clear descriptions and see what happens. The worst
case is you spend a few minutes reviewing code that doesn&amp;rsquo;t work. The best case
is you discover a new way of working that fits your development style.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Riding the waves of history</title>
    <link rel="alternate" href="http://shiroyasha.io/riding-the-waves-of-history.html"/>
    <id>http://shiroyasha.io/riding-the-waves-of-history.html</id>
    <published>2025-03-30T00:00:00+00:00</published>
    <updated>2025-09-02T13:30:31+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;‚ÄúIt‚Äôs hard to predict the future,‚Äù I texted my friend last week. 
We‚Äôd been messaging back and forth about AI, sharing links about 
ChatGPT‚Äôs latest image generation capabilities, and debating 
whether programming as we know it is dead. The conversation...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&amp;ldquo;It&amp;rsquo;s hard to predict the future,&amp;rdquo; I texted my friend last week. 
We&amp;rsquo;d been messaging back and forth about AI, sharing links about 
ChatGPT&amp;rsquo;s latest image generation capabilities, and debating 
whether programming as we know it is dead. The conversation had 
that familiar mix of excitement, dread, and philosophical hot-takes
that seems to follow most discussions of artificial intelligence 
these days.&lt;/p&gt;

&lt;p&gt;After sharing some thoughts about how mid-level jobs might be 
affected, I found myself typing: &amp;ldquo;We ride on the waves of history&amp;rdquo;.
It wasn&amp;rsquo;t resignation of the future, but a recognition that some 
forces are bigger than our ability to control them.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ve been wrestling with for months is this: In a world where 
technological change is happening at a pace that makes any five-year
plans seem like a pile of crap, my instinct is to crave certainty.
To look for predictions. &lt;/p&gt;

&lt;p&gt;My friend and I had just spent a couple of hours sharing tweets about 
AI-generated ghibli images and debating whether developers and designers
are screwed. We swapped articles with doomsday predictions, then links 
to optimistic counterpoints, searching for some answer that 
would make sense of it all.&lt;/p&gt;

&lt;p&gt;But what if that&amp;rsquo;s the wrong approach entirely?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve come to believe that our relationship with uncertainty itself may 
be the most important skill to develop in this moment of history. Not 
predictions about AGI timelines or which jobs will be automated or 
if we&amp;rsquo;re months away from digital overlords, but rather, how we position
ourselves mentally when the only certainty is rapid change.&lt;/p&gt;

&lt;p&gt;Learning how to surf instead of building ever-higher damns to protect us
from the incoming cunami. How we relate to uncertainty determines everything
downstream: what we build, how we invest our time, what skills we develop, 
and perhaps most importantly, whether we face the future with creative 
optimism or defensive pessimism.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Optimists push the world forward,&amp;rdquo; I wrote to him toward the end of our 
conversation. &lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s talk about riding waves instead of being crushed by them. About 
what it means to live in &lt;em&gt;interesting times&lt;/em&gt; when the only certainty 
is change itself.&lt;/p&gt;

&lt;h2&gt;Riding the waves&lt;/h2&gt;

&lt;p&gt;This isn&amp;rsquo;t about blind optimism, it is about recognizing that adaptability 
beats prediction every time. The most valuable skill isn&amp;rsquo;t foreseeing which
technologies will dominate, but developing frameworks that lets the world
change, without you drowning in it.&lt;/p&gt;

&lt;p&gt;Taleb&amp;rsquo;s &amp;ldquo;Antifragile&amp;rdquo; celebrates systems that gain from disorder. Mark&amp;rsquo;s 
&amp;ldquo;In Search of Certainty&amp;rdquo; exposes our addiction to false certainties, and 
people who are more than happy to sell them to us. Neither of the books offers
a prophecy.&lt;/p&gt;

&lt;p&gt;History doesn&amp;rsquo;t move in straight lines. Neither should our thinking. The
surfer doesn&amp;rsquo;t control the ocean. Ha masters responding to it. Fewer damns 
and more surfboards. The waves are coming. The only question is whether 
we&amp;rsquo;ll learn to ride them.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Europe failed Serbia</title>
    <link rel="alternate" href="http://shiroyasha.io/europe-failed-serbia.html"/>
    <id>http://shiroyasha.io/europe-failed-serbia.html</id>
    <published>2025-03-23T00:00:00+00:00</published>
    <updated>2025-09-02T13:30:31+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;I remember when Serbia loved Europe. Two decades ago, you could feel the electric
anticipation of EU membership everywhere in the country. As a Hungarian living in
Serbia, I had a unique perspective‚Äîwatching both my cultural identities navigate
their...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I remember when Serbia loved Europe. Two decades ago, you could feel the electric
anticipation of EU membership everywhere in the country. As a Hungarian living in
Serbia, I had a unique perspective‚Äîwatching both my cultural identities navigate
their European relationships simultaneously. The values that Europe claimed to
represent weren&amp;rsquo;t new to Hungarians or Serbians. Democratic governance. Rule of law.
Freedom of movement. Independant journalism. They weren&amp;rsquo;t foreign concepts we
needed to adopt. They were principles we had fought for, and in many cases, died for.
My family, friends, and neighbors fought for these values long before the EU membership
was on the table. We weren&amp;rsquo;t becoming European. We were reclaiming what was already
ours.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve experienced the EU&amp;rsquo;s failure to protect these values from a dual perspective.
As a Hungarian, I watched Hungary&amp;rsquo;s EU integration while simultaneously seeing Serbia 
kept waiting. I could see how the EU operated differently with different nations. 
The contrast was striking and often disheartening. The EU&amp;rsquo;s treatment of Serbia was
a stark reminder that the EU&amp;rsquo;s values were not universal. They were conditional.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen EU representatives lecture Serbia on the importance of a free press while
shaking hands with regime officials who openly dismantled independent media. I&amp;rsquo;ve
witnesed the broken hearts of everyday Serbians watching these performances. The
congitive dissonance between EU&amp;rsquo;s words and actions is a wound that won&amp;rsquo;t heal.
Europe developed a stomach for hypocrisy. They would fly in, make a few speeches,
shake hands with the people who were destroying Serbia, and then fly out.&lt;/p&gt;

&lt;p&gt;The last four months crystallized this hypocrisy perfectly. I stood amond thousands
of fellow citizens, protesting the regime&amp;rsquo;s latest assault on democracy and the
indirect murder of people resulting from years corruption. We took the streets
demanding judicial independence, media freedom, the processing of all the actors
involved in the accident. We weren&amp;rsquo;t asking for special treatment, just the 
foundamental principles Europe claims to champion. This was Europe&amp;rsquo;s moment to 
stand with us, to demonstrate that its commitment to democracy trancends political 
calculations.&lt;/p&gt;

&lt;p&gt;What happened instead? I watched European representatives maintan a &amp;ldquo;business as usual&amp;rdquo;
with the regime, giving it legitimacy while we protested outside. These were not
some abstract policies, these were tangible betrayals happening in real time.
Consider what this feels like: marching for values explicitly states in EU founding
documents while watching the EU representatives staying silent. The message cound&amp;rsquo;t
be clearer.&lt;/p&gt;

&lt;p&gt;Serbian citizens haven&amp;rsquo;t abandoned European values. Europe abandoned us by consistently
choosing a &amp;ldquo;stablecracy&amp;rdquo;. We don&amp;rsquo;t need expressions of &amp;ldquo;deep concern&amp;rdquo;. We need Europe
to align its actions with its words and principles.&lt;/p&gt;

&lt;p&gt;Despite everything, I maintain the hope that Europe can transform itself. That it can
rediscover and truly embrace democratic values. &lt;/p&gt;

&lt;p&gt;What troubles me most is the change I&amp;rsquo;ve witnessed amound my friends. People who once
spoke of Europe with admiration now speak of it with bitterness. Some actively despise
the EU, something that would have been unthinkable in my social circles just a decade
ago. These aren&amp;rsquo;t people who have rejected democratic values, the rule of law, or 
freedom. They&amp;rsquo;ve rejected the EU&amp;rsquo;s hypocrisy. They&amp;rsquo;ve rejected the EU&amp;rsquo;s betrayal.&lt;/p&gt;

&lt;p&gt;Europe revealed its priorities. People adjusted accordingly. It&amp;rsquo;s that simple.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Freedom and the Rule of Law</title>
    <link rel="alternate" href="http://shiroyasha.io/freedom-and-the-rule-of-law.html"/>
    <id>http://shiroyasha.io/freedom-and-the-rule-of-law.html</id>
    <published>2025-03-16T00:00:00+00:00</published>
    <updated>2025-09-02T13:30:31+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;Rain fell steadily from a gray, oppressive sky as I joined the growing mass of 
people at the city‚Äôs edge. Flags and banners waved in the wind, and the sound
of horns filled the air. We were six kilometers from the Republic Square where
the protest...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Rain fell steadily from a gray, oppressive sky as I joined the growing mass of 
people at the city&amp;rsquo;s edge. Flags and banners waved in the wind, and the sound
of horns filled the air. We were six kilometers from the Republic Square where
the protest would take place, and the crown was already immense. I had never
seen so many people in one place before.&lt;/p&gt;

&lt;p&gt;As we began our march throught the streets, I found myself sourrounded by a 
cross-section of Serbian society. Professors with rain-spotted glasses walked
alongside farmers who have traveled from all corners of the country. Tech workers
in rainproof jackets shared umbrellas with elderly pensioners who refused to let 
the weather deter them. Mothers pushed strollers, pushing through the crowd with
determination. The atmosphere was electric, and I felt a sense of unity that I had
never experienced before.&lt;/p&gt;

&lt;p&gt;This marked the fourth month of protests since the collapse of at the railway 
station in my hometown where a 300-ton concrete slab had fallen killing 15 people. 
The government had tried to shift the blame to the construction company, 
the original architects, the previous political party, and even some of their 
lower-ranking officials. Every attempt to deflect responsibility had only fueled
the public&amp;rsquo;s anger, and the protests had grown in size and intensity.&lt;/p&gt;

&lt;p&gt;The students had been the first to take to the streets, demanding justice. They
had been soon joined by workers, farmers, and professionals from all walks of life.
The requests are simple: apply the rule of law, hold those responsible accountable,
and ensure that such a tragedy never happens again. The government&amp;rsquo;s response had
been to ignore the protests, to dismiss them as the work of a foreign conspiracy,
and an attempt to destabilize the country.&lt;/p&gt;

&lt;p&gt;We continued our march through the city, our numbers swelling with every step.&lt;/p&gt;

&lt;p&gt;What struck me the most was the sense of unity. I stood shoulder to shoulder with
people I would normally pass on the street without a second glance, some I would
even avaid based on perceived differences. But here, on the streets of Belgrade,
we were all united in our demand for justice. We were all citizens of the same
country, and we all wanted the same thing: freedom and the rule of law.&lt;/p&gt;

&lt;p&gt;As we reached the inner city streets, the numbers grew so large that the streets
could no longer contain us. Almost a million people had gathered in the Republic
Square and the sourrounding streets. That is almost 20% of the country&amp;rsquo;s population.
An absolute sea of poeple, civilized and peaceful, yet determined and resolute.&lt;/p&gt;

&lt;p&gt;The protests that erupted across Serbia represent something rare in models political
discourse - a moment when citizens set aside their ideological differences to
defend the system that allows those very differences to exists. This wasn&amp;rsquo;t about
left versus right, young versus old, urban versus rural, or religious versus secular.
It is about preserving the foundamental principles that underpin our society: the
rule of law, accountability, and justice. Or in other words, demanding that the 
government be held to the same standards as the rest of us.&lt;/p&gt;

&lt;p&gt;What makes these demonstrations particularly significant is their focus not on
immidiate policy outcomes, but on the processes that legitimize the government
itself. The protesters are not demanding a change in the law, but rather the
enforcement of existing laws. They are not calling for a new government, but for
the current one to respect the will of the people. This distiction elevates the
demands from political to profoundly democratic.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The cost of silence</title>
    <link rel="alternate" href="http://shiroyasha.io/questions.html"/>
    <id>http://shiroyasha.io/questions.html</id>
    <published>2025-03-02T00:00:00+00:00</published>
    <updated>2025-09-02T13:30:31+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;I‚Äôve recently shared a post on X about the asking questions and the importance 
of it in a company culture. Here they are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The temporary discomfort of asking questions is nothing compared to the
permanent cost of not asking them. The biggest red...&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve recently shared a post on X about the asking questions and the importance 
of it in a company culture. Here they are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The temporary discomfort of asking questions is nothing compared to the
permanent cost of not asking them. The biggest red flag in any workplace? When
people stop asking questions. &lt;/p&gt;

&lt;p&gt;Risk to be stupid for 5 minutes. Learn. Repeat.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me expand on this a bit more.&lt;/p&gt;

&lt;p&gt;In almost every software project, there&amp;rsquo;s a moment when someone in the room,
often a junior developer or someone from another depertment, has a question but
doesn&amp;rsquo;t ask it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t understand why we&amp;rsquo;re doing this. It doesn&amp;rsquo;t make sense to me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question is left unasked. The meeting continues. The project moves forward.
The simple question goes unasked because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They don&amp;rsquo;t want to look uninformed.&lt;/li&gt;
&lt;li&gt;They don&amp;rsquo;t want to slow things down.&lt;/li&gt;
&lt;li&gt;They&amp;rsquo;re afraid of not being a team player, or lack loyalty.&lt;/li&gt;
&lt;li&gt;They&amp;rsquo;re afraid of being wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Six months, thousands of dollars later, the feature launches with a critical
flaw, or goes by unused. The team is left wondering why they wasted so much time
money. Was it a lack of skill? A lack of resources? A lack of time?&lt;/p&gt;

&lt;p&gt;No. It was a lack of questions.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a dangerous illusion plaguing most workplaces today. We&amp;rsquo;ve convinced
ourselves that looking smart is more important than getting things right. We
reward confidence over curiosity. We promote people who have answers, any 
answers, rather than those who ask essential questions and actually solve 
problems.&lt;/p&gt;

&lt;p&gt;Questions are the antibodies that fight organizational disease. They prevent
assumptions from calcifying into &amp;ldquo;truth.&amp;rdquo; They expose weak reasoning before it
becomes costly action.&lt;/p&gt;

&lt;p&gt;The strongest teams don&amp;rsquo;t penalize question - they celebrate them. They 
recognize that &amp;ldquo;stupid questions&amp;rdquo; prevents a truly stupid outcome. The most
valuable skill isn&amp;rsquo;t having all the answers, it&amp;rsquo;s knowing which questions will
unlock progress. Master questioaners cut through complexity and expese the
critical path forward.&lt;/p&gt;

&lt;p&gt;The cost of silence is too high. The cost of not asking questions is too great.
The cost of assuming is your job, your company, and your future.
Dare to ask. Be stupid for 5 minutes. Learn. Repeat.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Everything Around You Was Someone's Passion Project</title>
    <link rel="alternate" href="http://shiroyasha.io/everything-around-you-was-someones-passion-project.html"/>
    <id>http://shiroyasha.io/everything-around-you-was-someones-passion-project.html</id>
    <published>2025-02-16T00:00:00+00:00</published>
    <updated>2025-09-02T13:30:31+00:00</updated>
    <author>
      <name>Igor ≈†arƒçeviƒá</name>
    </author>
    <summary type="html">&lt;p&gt;Look around. Really look. That keyboard you‚Äôre typing on, the chair you‚Äôre
sitting in, the room you‚Äôre in, the building you‚Äôre in, the bakery at the end
of your street that sells that amazing bread, your freedom to walk down the
street without fear...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Look around. Really look. That keyboard you&amp;rsquo;re typing on, the chair you&amp;rsquo;re
sitting in, the room you&amp;rsquo;re in, the building you&amp;rsquo;re in, the bakery at the end
of your street that sells that amazing bread, your freedom to walk down the
street without fear of being arrested, the ability to read and write, the
ability to communicate with people on the other side of the planet. I can go on
forever.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re surrounded by other people&amp;rsquo;s devotion and hard work.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not hyporbole. It&amp;rsquo;s fact. Everything you see around you was someone&amp;rsquo;s
passion project. Before the mass production, before the focus groups, before
the value engineering. There was just someone who coudn&amp;rsquo;t let go of an idea.
Someone who looked at the impossible problem and said &amp;ldquo;I can solve this&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And they did.&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s what&amp;rsquo;s bothering me in Europe right now: We&amp;rsquo;ve become excellent at
pointing out problems. Master critiques. Professional complainers about
everything from government inefficiency to technological stagnation.&lt;/p&gt;

&lt;p&gt;We write lengthy threads about what&amp;rsquo;s wrong. &lt;br /&gt;
We share detailed analyses of system failures.  &lt;br /&gt;
We craft elegant critiques of institutional problems. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And then we wait.&lt;/p&gt;

&lt;p&gt;Wait for someone else to fix it. Wait for solutions to come from above. Wait
for the system to somehow reform itself. This isn&amp;rsquo;t analysis. It&amp;rsquo;s learned
helplessness.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been conditioned by decades of imperial power structures to think that
change comes from outside. That our role is to merely identify problems, 
complain a lot, and then wait for someone else to fix them. Actual 
implementation is someone else&amp;rsquo;s job. &lt;/p&gt;

&lt;p&gt;Everything around us was built by people ignored such compaints. They didn&amp;rsquo;t 
write treatises about why things are broken. They didn&amp;rsquo;t wait for perfect 
conditions. They didn&amp;rsquo;t expect someone else to solve their problems. We didn&amp;rsquo;t
wait for America to innovate for us. We didn&amp;rsquo;t wait for China to manufacture
for us.&lt;/p&gt;

&lt;p&gt;The first democracy wasn&amp;rsquo;t built by people waiting for kings to give up power.&lt;/p&gt;

&lt;p&gt;In the last three months, my country is the best example of how to break this
cycle. We&amp;rsquo;ve been through a lot in the last couple of decades. We&amp;rsquo;ve seen our 
institutions fail us. We&amp;rsquo;ve seen our leaders betray us and divide us. We&amp;rsquo;ve 
seen our systems collapse. We&amp;rsquo;ve seen our people suffer. We&amp;rsquo;ve seen corruption,
incompetence, and greed. &lt;/p&gt;

&lt;p&gt;But we&amp;rsquo;ve also seen something else. In the last three months, we&amp;rsquo;ve seen students
raise their voices. We&amp;rsquo;ve seen teachers, doctors, and engineers join them. We&amp;rsquo;ve
seen people from all walks of life come together to change things. We&amp;rsquo;ve seen
people who were told to wait for oposition parties to fix things, take matters
into their own hands.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what Europe needs to learn from this: The right time to start building
was 30 years ago. We fucked it up. The second best time is now.&lt;/p&gt;
</content>
  </entry>
</feed>
